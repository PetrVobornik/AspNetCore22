@inherits ComponentBase

<div class="policko @CssTridaPolicko">
    @switch (Symbol)
    {
        case TypSymbolu.Nic:
            <button @onclick="Kliknuto"></button>
            break;
        case TypSymbolu.X:
            <svg viewBox="0 0 10 10">
                <line x1="1" y1="1" x2="9" y2="9" stroke="red" />
                <line x1="9" y1="1" x2="1" y2="9" stroke="red" />
            </svg>
            break;
        case TypSymbolu.O:
            <svg viewBox="0 0 10 10">
                <ellipse cx="5" cy="5" rx="4" ry="4"
                 stroke="blue" fill="transparent" />
            </svg>
            break;
    }
</div>

@code {
    [Parameter]
    public TypSymbolu Symbol { get; set; }
    [Parameter]
    public byte Radek { get; init; }
    [Parameter]
    public byte Sloupec { get; init; }
    [Parameter]
    public Hra HraControl { get; set; }

    public bool Uzamknuto { get; set; }
    string CssTridaPolicko { get; set; }

    protected override void OnInitialized()
    {
        if (HraControl?.MapaPoli is null) return;
        HraControl.MapaPoli[Radek, Sloupec] = this;
        if (HraControl.DataHry.Stav != StavHry.Probiha &&
            HraControl.DataHry.ViteznaRada?.Contains(new Pos(Radek, Sloupec)) == true)
            Zvyraznit(HraControl.DataHry.Stav.ToString().Last() ==
                      HraControl.Hrac.ToString().Last());
        Symbol = HraControl.DataHry.Plocha[Radek, Sloupec];
    }

    void Kliknuto()
    {
        if (HraControl.DataHry.Stav != StavHry.Probiha) return;
        if (!Uzamknuto)
            HraControl.DataHry.UmisteniSymbolu(Radek, Sloupec);
        else
            HraControl.ZpravaControl.Zobrazit("Čeká se na protiháčův tah", Zprava.TypZpravy.Info);
    }

    public void ZmenaSymbolu(TypSymbolu symbol)
    {
        Symbol = symbol;
        InvokeAsync(StateHasChanged);
        HraControl?.ZpravaControl.Skryt();
    }

    public void Zvyraznit(bool vyhra)
    {
        CssTridaPolicko = vyhra ? "zvyrazneni-vyhra" : "zvyrazneni-prohra";
        InvokeAsync(StateHasChanged);
    }
}
