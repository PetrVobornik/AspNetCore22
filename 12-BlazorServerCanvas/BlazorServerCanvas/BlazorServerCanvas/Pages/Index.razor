@page "/"
@using Blazor.Extensions.Canvas
@using Blazor.Extensions;
@using Blazor.Extensions.Canvas.Canvas2D;
@using System.Drawing;
@using BlazorServerCanvas.Code;

@inject IJSRuntime JsRuntime;

<div style="position: fixed; width: 100%; height: 100%;"
     tabindex="0" @onkeydown="StiskKlavesy" @onkeydown:preventDefault>
    <BECanvas Width="600" Height="400" @ref="canvas"></BECanvas>
</div>

@code {
    BECanvasComponent canvas;
    Canvas2DContext ctx;
    static DateTime casPosledniObnovy;
    DateTime casPoslednihoVykresleni;
    SpravceHry hra;
    Had had;
    Jidlo jidlo => hra.Potrava;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        ctx = await canvas.CreateCanvas2DAsync();

        if (hra == null)
            hra = SpravceHry.Aktualni;
        if (had == null)
            had = hra.NovyHad();

        await JsRuntime.InvokeVoidAsync("pripravHruJS", DotNetObjectReference.Create(this));
        await base.OnAfterRenderAsync(firstRender);


    }

    protected override bool ShouldRender() => false;

    void StiskKlavesy(KeyboardEventArgs e)
    {
        if (e.Code == "ArrowUp" || e.Code == "KeyW") had.Smer = new Point(0, -1);
        else if (e.Code == "ArrowDown" || e.Code == "KeyS") had.Smer = new Point(0, 1);
        else if (e.Code == "ArrowLeft" || e.Code == "KeyA") had.Smer = new Point(-1, 0);
        else if (e.Code == "ArrowRight" || e.Code == "KeyD") had.Smer = new Point(1, 0);
        else if (e.Code == "Space" || e.Key == "Enter")
        {
            if (had.Skoncil)
                had = hra.NovyHad(had);
            else
                had.Smer = new Point(0, 0);
        }
    }

    [JSInvokable]
    public async ValueTask ObnovaHry(float timeStamp)
    {
        hra.Update();

        // Lokální překreslení (jednou za 150ms)
        if ((DateTime.Now - casPoslednihoVykresleni).TotalMilliseconds <= 1000/hra.FPS) 
            return;
        casPoslednihoVykresleni = DateTime.Now;


        // Vykreslení
        await ctx.BeginBatchAsync();

        // Vyčistit plochu
        await ctx.ClearRectAsync(0, 0, hra.Plocha.Width, hra.Plocha.Height);
        await ctx.SetFillStyleAsync("#000000");
        await ctx.FillRectAsync(0, 0, hra.Plocha.Width, hra.Plocha.Height);

        // Jídlo
        await ctx.BeginPathAsync();
        await ctx.SetFillStyleAsync("#FF0000");
        await ctx.ArcAsync(jidlo.Pozice.X + hra.Velikost / 2,
                           jidlo.Pozice.Y + hra.Velikost / 2,
                           hra.Velikost / 2, 0, 2 * Math.PI);
        await ctx.FillAsync();
        await ctx.ClosePathAsync();

        foreach (var had in hra.Hadi)
        {
            // Ocas hada
            await ctx.SetFillStyleAsync(had.BarvaOcasu.Hexadecimalne());
            for (int i = 1; i < had.Ocas.Count; i++)
                await ctx.FillRectAsync(had.Ocas[i].X + 1, had.Ocas[i].Y + 1,
                                        hra.Velikost - 1, hra.Velikost - 1);
            // Hlava hada
            await ctx.SetFillStyleAsync(had.Skoncil ? "#FFAAAA" : had.BarvaHlavy.Hexadecimalne());
            await ctx.FillRectAsync(had.Ocas[0].X + 1, had.Ocas[0].Y + 1,
                                        hra.Velikost - 1, hra.Velikost - 1);
            // Score hadů
            await ctx.SetFontAsync("26px Segoe UI");
            await ctx.SetFillStyleAsync(had.BarvaHlavy.Hexadecimalne());
            await ctx.FillTextAsync($"{had.Ocas.Count - 1}", 10, 
                30 + hra.Hadi.IndexOf(had) * 30);
        }      

        // Kreslení ukončeno
        await ctx.EndBatchAsync();
    }
}
